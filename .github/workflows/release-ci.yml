name: Release CI/CD

on:
  push:
    tags: ["*"]

jobs:
  Sast-Release:
    runs-on: ubuntu-latest
    name: SAST Scan

    permissions:
      security-events: write

    steps:
    - name: Checkout GitHub code
      uses: actions/checkout@v3

    - name: nodejsscan scan
      id: njsscan
      uses: ajinabraham/njsscan-action@7237412fdd36af517e2745077cedbf9d6900d711
      with:
        args: '. --sarif --output results.sarif || true'

    - name: Upload njsscan report
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: results.sarif

    - name: Initialize CodeQL
      uses: github/codeql-action/init@v2
      with:
        languages: javascript

    - name: Autobuild
      uses: github/codeql-action/autobuild@v2

    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v2

  Build-Release:
    environment: production
    runs-on: ubuntu-latest
    name: Ubuntu Build - Node ${{ vars.NODE_VERSION }}
    needs: [Sast-Release]

    steps:
    - name: Checkout GitHub code
      uses: actions/checkout@v3

    - name: Use Node.js ${{ vars.NODE_VERSION }}
      uses: actions/setup-node@v3
      with:
        node-version: ${{ vars.NODE_VERSION }}
        cache: npm

    - name: Build App
      run: |
        npm install
        npm run build

    - name: Make App
      run: |
        mkdir ${{ vars.AWS_NAME_PATH_BUILD }}
        mkdir ${{ vars.AWS_NAME_PATH_BUILD }}/src
        mv dist/* ${{ vars.AWS_NAME_PATH_BUILD }}/src/
        mv prisma/ ${{ vars.AWS_NAME_PATH_BUILD }}/prisma/
        mv package.json ${{ vars.AWS_NAME_PATH_BUILD }}/
        echo "PORT=${{ vars.AWS_API_PORT }}" > ${{ vars.AWS_NAME_PATH_BUILD }}/.env

    - name: Upload da pasta Build
      uses: actions/upload-artifact@v3
      with:
        name: ${{ vars.AWS_NAME_PATH_BUILD }}
        path: ${{ vars.AWS_NAME_PATH_BUILD }}/

  Coverage-Tests:
    environment: production
    runs-on: ubuntu-latest
    name: Tests Units and Integration Tests
    needs: [Build-Release]

    steps:
    - name: Checkout GitHub code
      uses: actions/checkout@v3

    - name: Use Node.js ${{ vars.NODE_VERSION }}
      uses: actions/setup-node@v3
      with:
        node-version: ${{ vars.NODE_VERSION }}
        cache: npm

    - run: npm install
    - run: npm run ci:reset
    - run: npm run test:ci

    - name: Coveralls push
      uses: coverallsapp/github-action@master
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}

  Deploy-Release:
    environment: production
    runs-on: ubuntu-latest
    name: Deploy AWS EC2
    needs: [Coverage-Tests]

    steps:
    - name: Use Node.js ${{ vars.NODE_VERSION }}
      uses: actions/setup-node@v3
      with:
        node-version: ${{ vars.NODE_VERSION }}

    - name: Download do Build-Production
      uses: actions/download-artifact@v3
      with:
        name: ${{ vars.AWS_NAME_PATH_BUILD }}
        path: ${{ vars.AWS_NAME_PATH_BUILD }}/

    - name: Push AWS EC2 Ubuntu
      uses: easingthemes/ssh-deploy@main
      env:
        SSH_PRIVATE_KEY: ${{ secrets.AWS_API_PRIVATE_KEY }}
        ARGS: "-rlgoDzvc -i --delete"
        SOURCE: "${{ vars.AWS_NAME_PATH_BUILD }}/"
        REMOTE_HOST: ${{ secrets.AWS_API_HOST }}
        REMOTE_USER: ${{ secrets.AWS_API_USER }}
        TARGET: "${{ vars.AWS_API_TARGET }}"
        EXCLUDE: "/${{ vars.AWS_NAME_PATH_BUILD }}/, /node_modules/"